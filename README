
7. Create Rating and Product component
    - Create component/Rating.js
    - Create div.rating
    - style div.rating, span and last span
    - Create Product component
    - Use Rating component

8. Build Product screen
    1. Install react-router-dom
    2. Use BrowserRouter and Rout for Home Screen
    3. Create HomeScreen.js
    4. Add product list code there
    5. Create ProductScreen.js
    6. Add new Route from product details to App.js
    7. Create 3 collumns for product image, info and action

9. Create NodeJS Server
    1. run npm init in root folder
    2. Update package.json set type: module
    3. Add .js to imports
    4. npm install express
    5. create server.js
    6. add start command as node backend/server.js
    7. require express
    8. create rout for / return backend is ready
    9. move product.js from frontend to backend
    10. create route for /api/products
    11. return products
    12. run npm start

10. Load product from backend
    1. edit Homescreen.js
    2. define products, loading and error.
    3. create useEffect
    4. define async fetchData and call it
    5. install axios
    6. get data from /api/products
    7. show them in the list
    8. create Loading component
    9. create Message Box component
    10. use them in HomeScreen

11. Install ESlint for Code Linting
    1. Install VSCode eslint extension
    2. npm install -D eslint
    3. run ./node_modules/.bin/eslint --intit
    4. create ./frontend/.env
    5. Add SKIP_PREFLIGHT_CHECK=true

12. Add Redux to Home Screen
    1. npm install redux react-redux
    2. Create store.js
    3. initState = {products: []}
    4. reducer == =(state, action) ==> switch :PAD_PRODUCTS: {products: action.payload}
    5. export default createStore(reducer, initState)
    6. Edit HomeScreen.js
    7. shopName = useSelector(state=> state.products)
    8. const dispatch = useDispatch()
    . useEffect(() => dispatch({type: LOAD_PRODUCTS, payload: data}))
    10. Add store to index.js

13. Add Redux to Product Screen
    1. create product details constants, actions and reducers
    2. add reducer to store.js
    3. user action in ProductScreen.js
    4. add /api/product/:id to backend api

14. Handle Add To Cart Button
    1. Handle Add To Cart in ProductScreen.js
    2. create CartScreen.js

15. Implement Add to Cart Action
    1. create addToCart constants, actions and reducers.
    2. add reducer to store.js
    3. use action in CartScreen.js
    4. render cartItems.length

16. Build Cart Screen
    1. Create 2 collumns for cart items and cart action.
    2. cartItems.length ==== 0 ? cart is empty.
    3. show item image, name, qty and price.
    4. Proceed to Checkout button.
    5. Implement remove for cart action.
